name: Build

on: [push, pull_request]

env:
  OTF2_VERSION: "3.0"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        compiler: [g++-9, g++-10, clang++-10, clang++-11, clang++-12]
        build-type: [Debug, RelWithDebInfo]
        hw_breakpoint: [ON, OFF]
        perf_clockid: [ON, OFF]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install binutils-dev libiberty-dev libsensors-dev
          sudo pip install git-archive-all
      - name: Cache OTF2
        id: cache-otf2
        uses: actions/cache@v2
        with:
          path: /opt/otf2/
          key: ${{ matrix.os }}-otf2-${OTF2_VERSION}
      - name: Install OTF2
        if: steps.cache-otf2.outputs.cache-hit != 'true'
        run: |
          wget https://perftools.pages.jsc.fz-juelich.de/cicd/otf2/tags/otf2-${OTF2_VERSION}/otf2-${OTF2_VERSION}.tar.gz
          tar -xf otf2-${OTF2_VERSION}.tar.gz
          cd otf2-${OTF2_VERSION}
          ./configure --prefix=/opt/otf2
          make -j2 install
      - name: Run CMake configure
        env:
          CXX: ${{ matrix.compiler }}
        run: cmake . -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DUSE_HW_BREAKPOINT_COMPAT=${{ matrix.hw_breakpoint }} -DUSE_PERF_CLOCKID=${{ matrix.perf_clockid }}
      - name: Build
        run: make -j 2
      - name: Create source tarball
        if: ${{ matrix.compiler == 'g++-10' && matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' }}
        run: make dist
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.compiler == 'g++-10' && matrix.os == 'ubuntu-20.04' && matrix.build-type == 'RelWithDebInfo' }}
        with:
          path: lo2s*.tar.bz2
