=encoding utf8

=head1 NAME

lo2s - Linux OTF2 sampling

=head1 SYNOPSIS

=over 5

=item B<lo2s>

S<[B<-q> | B<v>]>
S<[B<-m> I<PAGES>]>
S<[B<-k> I<CLOCKID>]>
S<[B<-->[B<no->]B<instruction-sampling>]>
S<[B<-e> I<EVENT>]>
S<[B<-c> I<N>]>
S<[B<-i> I<MSEC>]>
S<[B<-->[B<no->]B<disassemble>]>
S<[B<-->[B<no->]B<kernel>]>
S<[B<-t> I<TRACEPOINT>]>
S<[B<-E> I<EVENT>]>
S<[B<--userspace-metric-event> I<EVENT>]>
S<[B<--standard-metrics>]>
S<[B<--metric-leader> I<EVENT>]>
S<[B<--metric-count> I<N> | B<--metric-frequency> I<HZ>]>
S<[B<-x> I<KNOB>]>
S<[B<-X>]>
S<[B<-s SYSCALL>]>
S<[B<--accel ACCEL>]>
S<{ I<PROCESS_MONITORING> | I<SYSTEM_MONITORING> }>

=item I<PROCESS_MONITORING> := { I<COMMAND> | B<--> I<COMMAND> [I<ARGS>...] | B<-p> I<PID> }

=item I<SYSTEM_MONITORING> := { B<-a> [ I<PROCESS_MONITORING> ] }

=back

=head1 DESCRIPTION

B<lo2s> creates B<OTF2>-traces of uninstrumented processes and systems using the
Linux L<perf(1)> infrastructure, in particular the L<perf_event_open(2)> system
call.

It offers two modes of operation: I<process-monitoring mode> and
I<system-monitoring mode>.
In I<process-monitoring mode>, B<lo2s> will record information about a single
process and its descendants.
If I<COMMAND> is given, B<lo2s> acts as a prefix command, launching I<COMMAND>
and monitoring it until it exits.
Passing B<--> before I<COMMAND> stops option parsing in B<lo2s>, allowing
options to be passed to the command.
In case you want to monitor a process which is already running, specify B<-p>
I<PID> instead, where I<PID> is the process identifier of interest.
Monitoring will last until I<PID> exits.

I<System-monitoring mode> is enabled by passing the option B<-a>.
In this mode, B<lo2s> will monitor processes on all available CPUs indefinitely.
Optionally, if either I<COMMAND> or I<PID> is given, system monitoring will stop
when their respective processes exit.

At any time, monitoring can be interrupted safely by sending I<SIGINT> to
B<lo2s>.

Note that in order to access certain features, your system must be configured to
grant additional permissions.
The central point of configuration for B<perf> events is the
F</proc/sys/kernel/perf_event_paranoid> file.
The value in this file, called I<paranoid level>, represents the level of access
granted to B<perf>-features: the lower the value, the more features are
available.
Use L<systctl(8)> to change the level if needed:

    # sysctl kernel.perf_event_paranoid=<level>

See L<perf_event_open(2)> and L<https://docs.kernel.org/admin-guide/perf-security.html> for a more detailed description.
Options in B<OPTIONS> are annotated with the I<paranoid level> they require.

=head1 OPTIONS

=head2 General Options

=over

=item B<--help>

Show a help message.

=item B<--version>

Print version information.

=item B<-q>, B<--quiet>

Suppress all output, except for error messages.

=item B<-v>, B<--verbose>

Verbose output.
If specified multiple times, increase verbosity for each occurrence.

=over 6

=item B<NOTE:>

this option takes precedence over B<-q>.

=back


=item B<-o>, B<--output-trace> I<ARG> (default: C<lo2s_trace_{DATE}>)

Save the generated trace in a directory specified by I<ARG>.
The argument to this option supports a simple templating mechanism.
If it contains sequences in the form of C<{...}>, the sequence is substituted
before being interpreted as a filesystem path.

Substituted sequences are:

=over 4

=item B<{DATE}>

The current date in the L<strftime(3)> format of I<%Y-%m-%d_%H-%M-%S>.

=item B<{HOSTNAME}>

The L<hostname(7)> of the current system.

=item B<{ENV=>I<VAR>B<}>

Substitute the contents of environment variable I<VAR>.

=back

For example, running

    $ lo2s -o /tmp/trace_{ENV=USER}_{HOSTNAME} -- ...

might save the resulting trace file in the directory
F</tmp/trace_hal3000_discovery-one>.

=over 6

=item B<NOTE:>

If B<--output-trace> is not specified but the environment variable
I<LO2S_OUTPUT_TRACE> is set and not empty, its contents will be used to
determine the trace path instead, including variable substitution.

=back

=item B<-p>, B<--pid> I<PID>

Attach to a running process with process ID I<PID> instead of launching
I<COMMAND>.

=item B<-u>, B<--drop-root>

Launch I<COMMAND> as the user that called on sudo. Requires a lo2s call with sudo.

=item B<-U>, B<--as-user> I<USERNAME>

Launch I<COMMAND> as I<USERNAME>. The caller needs to have CAP_SETUID. Will take priority over B<-u> if specified together.

=item B<-m>, B<--mmap-pages> I<N> (default: C<16>)

Allocate I<N> pages for each internal buffer shared between B<lo2s> and the
kernel.
Higher values may reduce the amount of lost samples on high sampling
frequencies.
The maximum amount of mappable memory per system is configured by
F</proc/sys/kernel/perf_event_mlock_kb>.

=item B<-i>, B<--readout-interval> I<MSEC> (default: C<100>)

Wake up interval based monitors (i.e. x86_adapt, x86_energy, sensors) every I<MSEC> milliseconds to read event buffers

=item B<-I>, B<--perf-readout-interval> I<MSEC> (default: C<0>)

Wake up perf based monitors (i.e. sampling, metrics, tracepoints) at least every I<MSEC> milliseconds to read event buffers.
If I<MSEC> is 0 interval based readouts will be disabled.
Lower values should lead to more synchronous readouts but might increase the
perturbation of your measurements by B<lo2s>.
Use in conjunction with B<--mmap-pages>, B<--count> and B<--metric-count> to
minimize B<lo2s>'s overhead for your measurements.

=item B<-k>, B<--clockid> I<CLOCKID>

Set the internal reference clock used as a source of timestamps.
See B<--list-clockids> for a list of supported arguments.

Beyond standard clocks lo2s also supports a special "pebs" clock, which will
give the same timestamps as "monotonic-raw", but is set up in a slightly different
way to support the large PEBS feature of newer (Skylake+) Intel processors

=item B<--cgroup> I<NAME>

If set, only perf events for processes in the I<NAME> cgroup are recorded.

=item B<--list-clockids>

List the names of clocks that can be used as I<CLOCKID> argument.

=over 6

=item B<NOTE:>

Available clocks are determined heuristically at compile time.
Not all clocks may usable when running B<lo2s> on a system that is not the build
system.

=back

=item B<--list-events>

List available metric and sampling events.
Listed events can be used as I<EVENT>-arguments.

=item B<--list-tracepoints>

List available tracepoint events.
Listed events can be used as I<TRACEPOINT>-arguments.

=item B<--list-knobs>

List available L<x86_adapt.h(3)> CPU configuration items.
Use where I<KNOB> is required.

=back

=head2 Mode-selection options

=over

=item B<-a>, B<--all-cpus>

Start B<lo2s> in I<system-monitoring mode>.
Running B<lo2s> in this mode requires a I<paranoid level> of at most 0.

=item B<-A>, B<--all-cpus-sampling>

Shorthand option, equivalent to B<-a --instruction-sampling>.

=back

=head2 Sampling options

=over

=item B<-->[B<no->]B<instruction-sampling>

Enable or disable recording of instruction samples.

=item B<-e>, B<--event> I<EVENT> (default: C<instructions>)

Set instruction sampling interrupt source event.

=item B<-c>, B<--count> I<N> (default: C<11010113>)

Record an instruction sample each time I<N> instruction sampling interrupt
source events have occurred (as specified by B<--event>).
The default value is chosen to be a prime number to avoid aliasing effects on
repetetive instruction execution in tight loops.

=item B<-g>, B<--call-graph>

Record call stack of instruction samples.

=item B<-->[B<no->]B<disassemble>

Enable or disable augmentation of samples with disassembled instructions.
Enabled by default if supported.

=item B<-->[B<no->]B<kernel>

Enable or disable recording events happening in kernel space.
Enabled by default.
Reading events from kernel space requires a I<paranoid level> of at most 1.

=back

=head2 Metric options

=over

=item B<-E>, B<--metric-event> I<EVENT>

Record metrics for this perf event.
May be specified multiple times to record metrics for more than one event.
Try B<--userspace-metric-event> if I<EVENT> is not openable.

=item B<--userspace-metric-event> I<EVENT>

This is a more compatible but slower version of B<-E>.

=item B<--standard-metrics>

Enable a set of default events for metric recording.

=item B<--metric-leader> I<EVENT>

The leading metric event when using event count based metric recording, use in conjunction with
B<--metric-count> to control the number of events that have to elapse before a metric read is performed

=item B<--metric-count> I<N>

Controls the number of events that have to elapse before a metric read is performed by the kernel when using event
count based metric recording with B<--metric-leader>.
Higher values reduce the overhead incurred by B<lo2s>, but may lead to the
kernel buffers overflowing, in which case B<lo2s> will miss some metric events.
Use in conjunction with B<-m> to increase internal buffer sizes to reduce
overhead and risk of missing events.
This can only be used in conjunction with B<--metric-leader>

=item B<--metric-frequency> I<HZ>

This is used to set the frequency in time interval based metric recording, i.e. one readout every 1/I<HZ> seconds.
Can not be used in conjunction with B<--metric-leader>

=item B<--syscall> I<SYSCALLS>

Record syscall activity for the given syscall or "all" to record all syscalls.
Can be given multiple times to record multiple syscalls at once.
Argument may either be a syscall name, like "read", or a syscall number.
Note that due to the high event-rate of many syscalls it is advised to keep the number of recorded syscalls limited.

This is only available in system-wide measurement mode

=back

=head2 B<x86_adapt> and B<x86_energy> options

=over

=item B<-x>, B<--x86-adapt-knob> I<KNOB>

Record the L<x86_adapt.h(3)> knob I<KNOB>.
See B<--list-knobs> for a list of available arguments.

I<KNOB> may be suffixed with C<#I<SUFFIX>> to indicate an B<OTF2> metric mode,
where I<SUFFIX> is one of the following:

=over

=item C<absolute_point> | C<point> | C<p>:

B<OTF2_METRIC_ABSOLUTE_POINT>

=item C<absolute_last> | C<last> | C<l>:

B<OTF2_METRIC_ABSOLUTE_LAST>

=item C<accumulated_start> | C<accumulated>:

B<OTF2_METRIC_ACCUMULATED_START>

=back

=item B<-X>

Record L<x86_energy.h(3)> values.

=back

=head2 B<Block I/O> options

=over

=item B<--block-io>

Record block I/O events using the block:block_rq_insert tracepoint for begin events and block:block_rq_complete tracepoint for end events specifically.

=item B<--block-io-cache-size> I<NUM>

Size of the per-CPU cache in number-of-events. A larger cache size might increase performance but comes at the cost of a higher memory footprint.

=back

=head2 B<sensors> options

=over

=item B<-S>, B<--sensors>

Record measurements for each sensor found by L<sensors(1)>.

=back

=head2 B<Accelerator> options

=over

=item B<--accel> I<ACCEL>

Record activity events (instruction samples or kernel execution information) for the given accelerator. Usable accelerators are "nec" for NEC SX-Aurora and "nvidia" for NVidia CUDA accelerators.

=item B<--nec-readout-interval> I<USEC>

Set the interval (in microseconds) between NEC SX-Aurora instruction samples.

=item B<--nec-check-interval> I<MSEC>

Set the interval (in milliseconds) between checks for new NEC SX-Aurora processes.

=back

=head2 Arguments to options

=over

=item I<EVENT>

The name of a perf event.
Format is one of the following:

=over

=item C<I<name>>

A predefined event.

=item C<I<pmu>/I<event>/> or C<I<pmu>:I<event>>

A kernel PMU event.
Kernel PMU events can be found under
F</sys/bus/event_source/devices/I<E<lt>pmuE<gt>>/event/I<E<lt>eventE<gt>>>.

=item C<rI<NNNN>>

A raw event, where I<NNNN> is the hexadecimal identifier of the event.

=back

See B<--list-events> for a list of events available.

=item I<TRACEPOINT>

The name of a kernel tracepoint event.
Format is one of

=over

=item C<I<group>:I<name>> or C<I<group>/I<name>>

=back

Tracepoint events can be found under
F</sys/kernel/debug/tracing/events/I<E<lt>groupE<gt>>/I<E<lt>nameE<gt>>>.
Use B<--list-tracepoints> to get a list of tracepoints events.

Using L<perf-probe(2)>, it is possible to define dynamic tracepoints for use
with B<lo2s>.
Consider the C-function

    void __attribute__((optimize("O0")))
    my_marker(int some_variable)
    {
        ...
    }

that is compiled into F<a.out>.
Running

    # perf probe -x ./a.out my_marker some_variable

will create a dynamic tracepoint for this function available for use with
B<lo2s>:

    $ lo2s -t probe_a:my_marker ...

=over 6

=item B<PERMISSIONS:>


Recording tracepoint events usually requires both read and execute permissions
on F</sys/kernel/debug>.

To mount the debugfs execute:

    # mount -t debugfs none /sys/kernel/debug

Non-root access requires you to change the ownership of the debugfs and execute with kernel.perf_event_paranoid set to -1:

    # chown -R myusername /sys/kernel/debug
    # sysctl kernel.perf_event_paranoid=-1


=back

=item I<CLOCKID>

The name of a system clock.
Use B<--list-clockids> to get a list of clocks.

=back

=head1 ENVIRONMENT

=over

=item B<LO2S_OUTPUT_TRACE>

See B<--output-trace>.

=item B<LO2S_OUTPUT_LINK>

If the variable is set, the contents of this variable specify the path at which
a symbolic link to the generated trace directory will be created.
If the path does not exist, a new symbolic link to the latest trace will be
generated.
If it does exists, but is a symbolic link, point it to the latest trace
directory.
Otherwise, issue a warning.

Setting this variable might be useful should you find yourself repeatedly
switching between generating traces and analyzing them.
Instructing your preferred trace analysis software to open the trace from the
symlinked directory allows you to quickly view the latest version by simply
reloading it.

=item B<LO2S_METRIC_PLUGINS>

A comma separated list of metric plugins to load.

=item B<LO2S_METRIC_>I<PLUGIN> or B<LO2S_METRIC_>I<PLUGIN>B<_PLUGIN>

A comma separated list of metric events to record for the plugin I<PLUGIN>.

=back

=over 6

=item B<NOTE:>

In compatibility with L<scorep(1)>, all environment variables starting with
C<LO2S_METRIC_> may be prefixed with C<SCOREP> instead of C<LO2S>.
Plugins themselves may use additional environment variables for configuration
that allow only the C<SCOREP> prefix.

=back

=head1 PERFORMANCE OPTIMIZATIONS

Performance problems in lo2s may lead to information missing in the trace due to event loss and skewed results due to excessive lo2s activity perturbating the recorded metrics. lo2s contains several knobs that may be used to optimize its performance.

=head2 Memory allocated to perf buffers

B<--mmap-pages> governs the amount of memory that is allocated to each perf event-reading buffer. For measuring modes that use the perf interface to collect data (e.g. sampling, metrics, tracepoints or block I/O) this is the most effective tuning knob, as larger buffer result in longer time until buffer overflow and less lo2s activity during measurement.

Because pages used by perf need to be locked into memory - thus, these pages cannot be swapped out - the values that can be used for B<--mmap-pages> are limited by B<RLIMIT_MEMLOCK> and B<perf_event_mlock_kb>.

B<perf_event_mlock_kb> governs the amount of memory a user can lock per-CPU specifically for use with perf. The current B<perf_event_mlock_kb> limit can be read or set from F</proc/sys/kernel/perf_event_mlock_kb>.

If the user wants to lock more memory than the B<perf_event_mlock_kb> limit allows, the pool B<RLIMIT_MEMLOCK> is used, which is shared between all processes that lock memory. B<RLIMIT_MEMLOCK> can be read or set via the B<ulimit -l> command.

Priviliged users, user posessing the CAP_IPC_LOCK capability, or users running on system with perf_event_paranoid set to -1 can lock unlimited amounts of memory and are thus not limited in the value that can be set for B<--mmap-pages>

As the number of active perf buffers can vary wildly between different lo2s use-cases no general rule for adjusting B<--mmap-pages> according to the B<RLIMIT_MEMLOCK> and B<perf_event_mlock_kb> limits can be given. The user is advised to discover the ideal value for B<--mmap-pages> through trial-and-error, as lo2s will report mmap buffer creation related failures early during startup.

=head2 Memory allocated to block I/O caches

Block I/O events are cached per-CPU before they are written into a global block I/O cache.
B<--block-io-cache-size> governs the number of elements the per-CPU block I/O cache holds. Increasing the number of elements in the block I/O cache reduces the number of lo2s wake-ups spent on merging block I/O caches.

=head1 SEE ALSO

L<perf(1)>, L<perf_event_open(2)>
